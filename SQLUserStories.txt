CREATE TABLE Customer(
    CustomerID INT(7) ZEROFILL AUTO_INCREMENT PRIMARY KEY,
    Name varchar(50),
    Email varchar(50),
    Mobile varchar(10),
    Password varchar(30),
    Address varchar(300)
);

INSERT INTO Customer(Name, Email, Mobile, Password, Address) 
    VALUES
    ('AJAYA', 'ajay@2002.com', '9944554422', 'nskdfkaubbf', 'Munderwa'),
    ('FAIZ', 'faiz@2002.com', '9966774422', 'jnfeudbbf', 'BSB'),
    ('DIVYANSHU', 'dd@2002.com', '9900554422', 'nskdkjnsdfsfkaubbf', 'LKO'),
    ('IFHAM', 'kaptaan@2002.com', '9922554422', 'ksndfs', 'LKO'),
    ('ARUN', 'motu@2002.com', '9944559922', 'kndfadfasd', 'GKP');

ALTER TABLE Customer ADD COLUMN (ConfirmPassword varchar(30));
UPDATE Customer SET ConfirmPassword = Password WHERE 1=1;


-- SELECT * FROM Customer;

CREATE TABLE Products(
    ProductID INT(3) ZEROFILL AUTO_INCREMENT UNIQUE PRIMARY KEY,
    ProductName varchar(25),
    ProductPrice FLOAT,
    ProductCategory varchar(30),
    ProductDescription varchar(200)
    
);

-- DESC Products;

INSERT INTO Products(ProductName, ProductPrice, ProductCategory, ProductDescription)
VALUES
('Maggi', 14.00, 'Food', 'Instant Noodles'),
('Oreo', 10.00, 'Food', 'Cadbury Biscuit'),
('Shirt', 1400.00, 'Fashion', 'Premium Shirts'),
('Pants', 1000.00, 'Fashion', 'Formal Pants'),
('Shoes', 80000.00, 'Fashion', 'Leather Shoes'),
('Pencil', 5.00, 'Stationary', 'Endless Friend'),
('Pen', 10.00, 'Stationary', 'Write it out!'),
('NoteBook', 50.00, 'Stationary', 'Ruled'),
('Chair', 1400.00, 'Furniture', 'Maharaja Chair'),
('Table', 4000.00, 'Furniture', 'Dining Table');

-- SELECT * FROM Products;


CREATE TABLE Orders(
    OrderID INT(7) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT(3) ZEROFILL UNSIGNED NOT NULL,
    ProductID INT(3) ZEROFILL UNSIGNED NOT NULL,
    OrderedDate DATE NOT NULL,
    ExpectedDate DATE NOT NULL,
    DeliveredDate DATE,
    DeliveryStatus VARCHAR(15) NOT NULL,
    AmountPaid FLOAT NOT NULL,
    Status ENUM('confirmed', 'delivered', 'cancelled') NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO Orders(CustomerID, ProductID, OrderedDate, ExpectedDate, DeliveredDate, DeliveryStatus, AmountPaid, Status)
VALUES
(001, 001, "2022-06-15", "2022-06-22", "2022-06-20", "delivered", 14.00, "delivered"),
(002, 002, "2022-06-12", "2022-06-21", "2022-06-20", "delivered", 10.00, "delivered"),
(003, 003, "2022-06-13", "2022-06-22", "2022-06-20", "cancelled", 1400.00, "cancelled"),
(004, 004, "2022-06-14", "2022-06-22", "2022-06-20", "delivered", 1000.00, "delivered"),
(001, 005, "2022-06-11", "2022-06-23", "2022-06-20", "delivered", 80000.00, "delivered"),
(002, 006, "2022-06-12", "2022-06-21", "2022-06-20", "delivered", 5.00, "delivered"),
(004, 007, "2022-06-14", "2022-06-20", "2022-06-20", "cancelled", 10.00, "cancelled"),
(001, 008, "2022-06-11", "2022-06-20", "2022-06-20", "delivered", 50.00, "delivered"),
(001, 009, "2022-06-14", "2022-06-22", "2022-06-20", "confirmed", 1400.00, "confirmed"),
(003, 010, "2022-06-12", "2022-06-22", "2022-06-20", "delivered", 4000.00, "delivered");

SELECT c.CustomerID, c.Name, c.Email
FROM Customer c
LEFT JOIN Orders o
ON c.CustomerID = o.CustomerID
WHERE o.CustomerID IS NULL;

SELECT AVG(AmountPaid) avgPaid 
FROM Orders o
LEFT JOIN Customer c
ON o.CustomerID = c.CustomerID
WHERE c.Name LIKE '%a';

SELECT o.CustomerID, o.OrderID, o.ProductID, o.OrderedDate, o.ExpectedDate, c.Address
FROM Orders o
LEFT JOIN Customer c
ON o.CustomerID = c.CustomerID
WHERE Status = 'confirmed' ORDER BY o.ProductID;

SELECT o.CustomerID, o.OrderID, o.OrderedDate, o.ProductID, o.DeliveredDate, c.Address
FROM Orders o
LEFT JOIN Customer c
ON o.CustomerID = c.CustomerID
WHERE Status = 'delivered' ORDER BY ProductID;

SELECT o.CustomerID, o.OrderID, o.ProductID, o.OrderedDate, o.DeliveredDate
FROM Orders o WHERE Status = 'cancelled' ORDER BY ProductID; 

SELECT ProductCategory as Category, COUNT(*) as TotalAmount FROM Products
GROUP BY Category;

SELECT CustomerID, COUNT(CustomerID) as NoOfOrderPlaced FROM Orders GROUP BY CustomerID ORDER BY NoOfOrderPlaced DESC LIMIT 0, 1;

-- SELECT * FROM Orders WHERE 6-1 = ()


